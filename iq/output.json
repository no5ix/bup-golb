[
  {
    "id": 451,
    "question": "What is micro frontend/ micro UI and how micro frontend communicate with each other",
    "answer": "<ol><li>micro frontend is just like microservcie in backend, it splits the frontend into multiple module based applications</li></ol><p>TO communicate</p><ol><li>Use parameter based URL to carry data</li><li>Use events, one module emit events, another module subscribe to the events</li><li>Use shared data store, like NgRx. </li></ol>\",",
    "keyword": "Angular",
    "frequency": 5,
    "top": true
  },
  {
    "id": 30,
    "question": "Can you talk about CI/CD?",
    "answer": "<p>KeyPoints:</p><ol><li>CICD is continuous integration and continuous deployment. In the project, we usually use Jenkins with its pipeline scripts to implement CICD. </li><li>The script contains multiple parts. The <code>stages</code> parts list each stage and the steps inside. For example, stage one is <code>checkout</code> and steps in this stage are like using git clone to checkout the code from repository and then use maven to package it etc.  Another part of the script is <code>post</code> part which handles different result. For example, what to do when the build is success or failure, what to do when the test cases failed etc. </li><li>CICD usually starts from when the code is pushed to the target branch, and then it includes checkout and package the code, deploy the jar/war, run the test cases and send reports etc. It could cover from dev to QA/Staging environment, but usually does not cover production.</li></ol>\",",
    "keyword": "CICD",
    "frequency": 5,
    "top": true
  },
  {
    "id": 235,
    "question": "How to use docker in the Spring Boot?",
    "answer": "<p>Docker is a container with flexible memory management and has dockerHub that you can upload or download images</p><p>To use with Spring boot, 1) include docker dependency 2) add a Dockerfile</p>\",",
    "keyword": "Docker",
    "frequency": 2,
    "top": true
  },
  {
    "id": 298,
    "question": "Key Difference: Soap vs Rest",
    "answer": "<ol><li><strong>SOAP</strong> is a protocol that defines a set of rules for structuring messages. It has strict standards and typically operates over HTTP but can also use other protocols like SMTP, FTP, etc.</li><li><strong>REST</strong> is an architectural style that uses existing protocols (primarily HTTP) and is more flexible and lightweight. It focuses on resources and their representations.,</li></ol>",
    "keyword": "Rest",
    "frequency": 0,
    "top": true
  },
  {
    "id": 40,
    "question": "If you have error, but it is not showing in log, how do you debug and find it.",
    "answer": "<ol><li>When you have an error that is not showing in the log, here are some steps you can take to debug and find it:</li><li>\"keyword\": \"System\",</li><li>\"frequency\": 4,</li><li>\"id\": 448,</li><li>\"question\": \"What is proxy design pattern\",</li><li>\"answer\":</li><li>The Proxy Design Pattern is a structural design pattern that provides a surrogate or placeholder for another object to control access to it. It is used to control access to the real object, add additional functionality, or provide a more efficient way of accessing the object. Here's a detailed explanation:</li><li>Subject: This is an interface that defines the common interface for the RealSubject and Proxy.</li><li>RealSubject: This is the actual object that the proxy represents.</li><li>Proxy: This is the object that controls access to the RealSubject. It has a reference to the RealSubject and implements the Subject interface.</li><li></code>interface Image<code> defines the </code>display()<code> method that both </code>RealImage<code> and </code>ProxyImage<code> will implement.</li><li></code>RealImage<code> implements </code>Image<code>.</li><li>The </code>RealImage<code> constructor loads the image from disk when an instance is created.</li><li>The </code>display()<code> method displays the image.</li><li></code>ProxyImage<code> also implements </code>Image<code>.</li><li></code>ProxyImage<code> holds a reference to </code>RealImage<code>.</li><li>In the </code>display()<code> method of </code>ProxyImage<code>, if </code>realImage<code> is not instantiated, it creates a </code>RealImage<code> instance.</li><li>Then, it calls the </code>display()<code> method of </code>RealImage<code>.</li><li>\"keyword\": \"Java\",</li><li>\"frequency\": 4,</li><li>\"id\": 450,</li><li>\"question\": \"What is kafka dead letter queue and how do you handle it?\",</li><li>\"answer\": null,</li><li>\"keyword\": \"Kafka\",</li><li>\"frequency\": 4,</li><li>\"id\": 159,</li><li>\"question\": \"How does microservices communicate with each other?\",</li><li>\"answer\": null,</li><li>\"keyword\": \"Microservice\",</li><li>\"frequency\": 0,</li><li>\"id\": 290,</li><li>\"question\": \"Explain CAP theorem and which database use them\",</li><li>\"answer\": null,</li><li>\"keyword\": \"NoSQL\",</li><li>\"frequency\": 0,</li><li>\"id\": 162,</li><li>\"question\": \"Design a Employee Voting system according to the requirements\",</li><li>\"answer\": null,</li><li>\"keyword\": \"OOD\",</li><li>\"frequency\": 0,</li><li>\"id\": 166,</li><li>\"question\": \"Basic principles of the OOP\",</li><li>\"answer\": null,</li><li>\"keyword\": \"OOP\",</li><li>\"frequency\": 0,</li><li>\"id\": 316,</li><li>\"question\": \"SQL how to delete duplicate rows, only keep unique rows\",</li><li>\"answer\": null,</li><li>\"keyword\": \"SQL\",</li><li>\"frequency\": 0,</li><li>\"id\": 449,</li><li>\"question\": \"What to lazy loading a spring bean\",</li><li>\"answer\": null,</li><li>\"keyword\": \"Spring Core\",</li><li>\"frequency\": 4,</li><li>\"id\": 196,</li><li>\"question\": \"Why do you use Spring Boot? / Benefits of Spring Boot\",</li><li>\"answer\": \"<p>Top 1 question in spring boot.</p><p>Spring boot has many benefits, the top 4 are like:</p><ol><li>Embedded Server: spring boot has </code>Web<code> starter which contains the tomcat or Jetty server, you dont need to deploy the application, it is auto-deployed by one click or one command line. You just run your whole application with server together as a JAR file</li><li>Auto Configuration: Spring boot has auto configuration, as long as you put the properties there, spring boot will auto setup everything. Example, if you have Data Source entries in the application.properties file, Spring boot will try to auto connect the database for you.</li><li>Dependency Management: Spring boot wraps up related dependencies into </code>starters`, like the Web Starter contains json, rest api, mvc model, server etc. You don't need to add them to POM.XML separately, also you dont need to worry about the version conflicts in the dependencies.</li><li>Actuator: Spring boot provides actuator which has many endpoints to tell the status of the spring boot application. Like:<em> /info</em> is to tell the status, <em>/health&nbsp;</em>summarizes the health status of our application. <em>/metrics&nbsp;</em>details metrics of our application. This might include generic metrics as well as custom ones.</li></ol><p><br></p><p>Disadvantage:</p><p>Spring boot wrap too many things in the box, so many things are in under the cover.</p>\",</li></ol>",
    "keyword": "Spring Boot",
    "frequency": 5,
    "top": true
  },
  {
    "id": 447,
    "question": "How to do cache in spring boot and how to refresh the cache",
    "answer": "<p>We can use @Cachable on a method to make the returned object </p>\",",
    "keyword": "Spring Boot",
    "frequency": 4,
    "top": true
  }
]